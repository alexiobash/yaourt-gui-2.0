#!/bin/bash
# Yaourt-Gui is a bash and GTK gui for yaourt and Pacman
#
# Creation-Date: 2015-06-23
#
# Support: http://alexiobash.com
# Mail: support@alexiobash.com
#
# Set environment
TEXTDOMAINDIR=/usr/share/locale
TEXTDOMAIN=yaourt-gui
BLUE="\033[7;34m"
BLU="\033[1;34m"
RED="\033[1;31m"
LRED="\033[7;31m"
WHI="\033[1;37m"
NC="\033[0m"
YELLOW="\033[1;33m"
GREL="\033[7;32m"
GRE="\033[1;32m"
PROFD=/etc/profile.d
CONFIG=/usr/share/yaourt-gui
SCRIPT="$CONFIG/script"
VER=$(cat $CONFIG/RELEASE)

# Export for languages
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=yaourt-gui

# Load Yaourt-GUI conf
source /etc/yaourt-gui.conf

# Function pause
function pause(){
	read -p "$*"
}

# Function Press Enter
press_enter (){
	echo -e ""$GRE"$(gettext 'Press ENTER to display the Menu')$NC"
	pause
}

# Main Bash menu
main_menu () {
	if [[ -f $PROFD/proxy.sh ]]; then source $PROFD/proxy.sh; fi
    clear	
	if [[ -f $SCRIPT/yglogo.sh ]]; then $SCRIPT/yglogo.sh; echo -e ""; else echo -e ""$RED"$SCRIPT/yglogo.sh $(gettext 'not found')!!!$NC"; fi
    echo -e "$GREL                  YAOURT-GUI $VER - A bash GUI for Yaourt                 $NC"
    echo -e ""
    echo -e "$(gettext '[1] Sync DB		[9]  Search & Install	[17] Set Proxy')"
    echo -e "$(gettext '[2] Update System	[10] Belongs To Files	[18] Remove Proxy')"
    echo -e "$(gettext '[3] Update force mode	[11] Info Packages	[19] Edit pacman.conf')"
    echo -e "$(gettext '[4] Install Packages	[12] Clear Cache	[20] Edit yaourtrc')"
    echo -e "$(gettext '[5] Remove Packages	[13] PacDiffViewer      [L] Log Pacman')"
    echo -e "$(gettext '[6] Update Packages	[14] Pacman DB Upgrade	[B] Backup pkg list')"
    echo -e "$(gettext '[7] Remove Dependencies	[15] Pacman Optimize    [H] Help yaourt-gui')"
    echo -e "$(gettext '[8] Search Packages     [16] Yaourt Stats       [Q] Quit')"
    echo -e ""
    echo -e ""$YELLOW"$(gettext 'Run a Command or Number'):$NC"
	read opt
	case $opt in
		1) # Sync repo
			echo -e "$GRE==> $(gettext 'DB Synchronization in progress...')$NC"
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -Sy $NC "
			yaourt -Sy
			echo -e ""
			press_enter		
			main_menu
		;;
		2) # Update System
			echo -e ""
			echo -e "$GRE==> $(gettext 'Update in progress.... !!!Please Wait!!!')$NC"
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -Sua $NC"
			yaourt -Sua
			echo -e ""
			press_enter
			main_menu
		;;
		3) # Update System Force mode
			echo -e ""
			echo -e "$GRE==> $(gettext 'Update in progress.... !!!Please Wait!!!')$NC"
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -Sua --force $NC"
			yaourt -Sua --force
			echo -e ""
			press_enter
			main_menu
		;;
		4) # Install Packages
			echo -e "$GRE $(gettext 'Which packages do you want install?')$NC"
		    read PKG 
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -S $PKG $NC"
		    yaourt -S $PKG
			echo -e ""
			press_enter
			main_menu
		;;
		5) # Remove Packages
			echo -e "$GRE $(gettext 'Which Package do you want remove?')$NC"
			read PKR 
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -R $PKR $NC"
			yaourt -R $PKR
			echo -e ""
			press_enter
			main_menu
		;;
		6) # Update Packages
			echo -e "$GRE $(gettext 'Which packages do you want upgrade?') $NC"
			read PKAG
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -U $PKAG $NC"
			yaourt -U $PKAG 
			echo -e ""
			press_enter
			main_menu
		;;
		7) # Remove Dependencies
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -R "\$"(yaourt -Qdtq) $NC"
			yaourt -R $(yaourt -Qdtq)
			echo -e ""
			press_enter
			main_menu
		;;
		8) # Search Packages
			echo -e "$GRE $(gettext 'Which packages do you want search?') $NC"
			read PKAGE
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -Ss $PKAGE $NC"
			yaourt -Ss $PKAGE 
			echo -e ""
			press_enter
			main_menu
		;;
		9) # Search & Install
			echo -e "$GRE $(gettext 'Which packages do you want search and install?') $NC"
			read PKAGE
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt $PKAGE $NC"
			yaourt $PKAGE 
			echo -e ""
			press_enter
			main_menu
		;;
		10) # belong file
			echo -e "$GRE $(gettext 'Which file or commands do you want search?') $NC"
			read PKAGE3
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -Qo $PKAGE3 $NC"
			yaourt -Qo $PKAGE3 
			echo -e ""
			press_enter
			main_menu
		;;
		11) # Info Package
			echo -e ""$GRE" $(gettext 'Which packages do you want search?')$NC"
			read PKS
			clear
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -Qi $PKS $NC"
			echo -e	""
			yaourt -Qi $PKS
			echo -e ""
			press_enter
			main_menu
		;;
		12) # Clear Cache
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -Scc $NC"	
			yaourt -Scc
			echo -e ""
			press_enter
			main_menu
		;;
		13) # Pac Diff Viewer
			clear
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -C $NC"
			echo -e""
			yaourt -C
			echo -e ""
			press_enter
			main_menu
		;;
		14) # pacman-db-upgrade
			echo -e "$YELLOW==> $(gettext 'COMMAND'): pacman-db-upgrade$NC"
			echo -e""
			sudo pacman-db-upgrade  
			echo -e ""$GRE"$(gettext 'Upgrade successfully')$NC"
			press_enter
			main_menu
		;;
		15) # pacman-optimize
			clear
			echo -e "$YELLOW==> $(gettext 'COMMAND'): pacman-optimize$NC"
			echo -e""
			sudo pacman-optimize  
			echo -e ""
			press_enter
			main_menu
		;;
		16) # Yaourt Statistic
			clear
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt --stats $NC"
			echo -e""
			yaourt --stats
			echo -e ""
			press_enter
			main_menu
		;;
		17) # Set Proxy
			echo -e "$GRE $(gettext 'Is a Auth Proxy? y/n [default yes]')$NC"
			read SNI
			case $SNI in
				$(gettext 'y')|"")
					echo -e ""
					echo -e "$YELLOW$(gettext 'Write Username')$NC"
					read -er USRNAME	
					echo -e "$YELLOW$(gettext 'Write Password')$NC"
					read -es PASSWPR
					echo -e ""
					echo -e "$YELLOW$(gettext 'Write Ip or Hostname Proxy')$NC"
					read PROXY
					echo -e "$YELLOW$(gettext 'Write port Proxy')$NC"
					read PORT
					echo -e "#!/bin/bash" > /home/$USER/proxy.sh	
					echo -e "PROXYHOST=$PROXY" >> /home/$USER/proxy.sh
					echo -e "PROXYPORT=$PORT" >> /home/$USER/proxy.sh		
					echo "export http_proxy='http://$USRNAME:$PASSWPR@$PROXY:$PORT'" >> /home/$USER/proxy.sh
					echo "export https_proxy='http://$USRNAME:$PASSWPR@$PROXY:$PORT'" >> /home/$USER/proxy.sh
					echo "export ftp_proxy='http://$USRNAME:$PASSWPR@$PROXY:$PORT'" >> /home/$USER/proxy.sh
					sudo mv /home/$USER/proxy.sh $PROFD
					sudo chmod +x $PROFD/proxy.sh
					sudo chown root:root $PROFD/proxy.sh
					source $PROFD/proxy.sh
					if [ -f $PROFD/proxy.sh ];then
						echo -e ""
						echo -e "$GRE==> $(gettext 'Proxy set successfully')$NC"
						echo -e ""
						press_enter
						main_menu
					else
						echo -e ""
						echo -e ""$RED"==> $(gettext 'The proxy is not set'):$NC"
						echo -e ""
						press_enter
						main_menu
					fi
				;;
				n|N) # NO PROXY AUTH
					echo -e ""
					echo -e "$YELLOW$(gettext 'Write Ip or Hostname Proxy')$NC"
					read PROXY
					echo -e "$YELLOW$(gettext 'Write port Proxy')$NC"
					read PORT
					echo -e "#!/bin/bash" > /home/$USER/proxy.sh	
					echo -e "PROXYHOST=$PROXY" >> /home/$USER/proxy.sh
					echo -e "PROXYPORT=$PORT" >> /home/$USER/proxy.sh		
					echo -e "export http_proxy='"http://$PROXY:$PORT"'" >> /home/$USER/proxy.sh
					echo -e "export https_proxy='"http://$PROXY:$PORT"'" >> /home/$USER/proxy.sh
					echo -e "export ftp_proxy='"http://$PROXY:$PORT"'" >> /home/$USER/proxy.sh
					sudo mv /home/$USER/proxy.sh $PROFD
					sudo chmod +x $PROFD/proxy.sh
					sudo chown root:root $PROFD/proxy.sh
					source $PROFD/proxy.sh
					if [ -f $PROFD/proxy.sh ];then
						echo -e ""
						echo -e "$GRE==> $(gettext 'Proxy set successfully')$NC"
						echo -e ""
						press_enter
						main_menu
					else
						echo -e ""
						echo -e ""$RED"==> $(gettext 'The proxy is not set'):$NC"
						echo -e ""
						echo -e ""
						press_enter
						main_menu
					fi
				;;
				*)
					echo -e ""
					echo -e ""$RED"$(gettext '!!!WARNING!!! Unknown command!!') $NC"
					press_enter
					main_menu
				;;
			esac
		;;
		18) # Remove Proxy
			echo -e "$GRE$(gettext 'Do you really want remove proxy? y/n  [default yes]')$NC"
			read SNE
			case $SNE in
				$(gettext 'y')|"")
					sudo rm -rf $PROFD/proxy.sh
					echo -e ""
					echo -e "$RED==> $(gettext 'Proxy Removed') $NC"
					echo -e ""
					press_enter
					main_menu
				;;
				n|N) main_menu ;;
				*)
					echo -e ""
					echo -e ""$RED"$(gettext '!!!WARNING!!! Unknown command!!') $NC"
					sleep 1
					main_menu
				;;
			esac
		;;
		19) # Edit pacman.conf
			if [[ -z $EDITOR ]]; then
				echo -e ""$GRE"$(gettext 'Which programs do you want use?')$NC"
				echo -e ""$GRE"$(gettext 'Write'): [N]nano [V]vim $NC"
				read PROGRAM
				case $PROGRAM in
					N|n|nano)
						sudo nano /etc/pacman.conf
						main_menu
					;;
					V|v|vi|VI|vim|VIM)
						if [ -f /usr/bin/vim ]; then
							sudo vim /etc/pacman.conf
						else
							sudo vi /etc/pacman.conf
						fi
						main_menu
					;;
				esac
			else
				sudo $EDITOR /etc/pacman.conf
			fi
			main_menu
		;;
		20) # Edit yaourtrc
			if [[ -z $EDITOR ]]; then
				echo -e ""$GRE"$(gettext 'Which programs do you want use?')$NC"
				echo -e ""$GRE"$(gettext 'Write'): [N]nano [V]vim $NC"
				read PROGRAM
				case $PROGRAM in
					N|n|nano)
						sudo nano /etc/yaourtrc
						main_menu
					;;
					V|v|vi|VI|vim|VIM)
						if [ -f /usr/bin/vim ]; then
							sudo vim /etc/yaourtrc
						else
							sudo vi /etc/yaourtrc
						fi
						main_menu
					;;
				esac
				main_menu
			else
				sudo $EDITOR /etc/yaourtrc
			fi
			main_menu
		;;
		l|L|log) # Log Pacman file
			sudo more /var/log/pacman.log
			main_menu 
		;;
		B|b) # Backup List pkg
			echo -e "$YELLOW==> $(gettext 'COMMAND'): yaourt -Qqe > ~/pkg_list.txt $NC"
			yaourt -Qqe > ~/pkg_list.txt
			sleep 1
			echo -e "$GRE==> $(gettext 'Backup list packages saved')! ~/pkg_list.txt $NC"
			echo ""
			press_enter
			main_menu
		;;
		H|h) # Help
			clear
			echo -e ""
			echo -e "$GREL !!!$(gettext 'GUIDE USE SCRIPT')!!! $NC"
			echo -e ""
			echo -e "$YELLOW==>$GRE [1]$NC "$(gettext 'To synchronize DB')""
			echo -e "$YELLOW==>$GRE [2]$NC "$(gettext 'To update the system')""
			echo -e "$YELLOW==>$GRE [3]$NC "$(gettext 'To update the system in force mode')""
			echo -e "$YELLOW==>$GRE [4]$NC "$(gettext 'To install a packages')""
			echo -e "$YELLOW==>$GRE [5]$NC "$(gettext 'To remove a packages')""
			echo -e "$YELLOW==>$GRE [6]$NC "$(gettext 'To update a packages')""
			echo -e "$YELLOW==>$GRE [7]$NC "$(gettext 'To remove unused dependencies')""
			echo -e "$YELLOW==>$GRE [8]$NC "$(gettext 'To search a packages')""
			echo -e "$YELLOW==>$GRE [9]$NC "$(gettext 'To search and install a packages')""
			echo -e "$YELLOW==>$GRE [10]$NC "$(gettext 'To view a file belonging')""
			echo -e "$YELLOW==>$GRE [11]$NC "$(gettext 'To query local database e info packages')""
			echo -e "$YELLOW==>$GRE [12]$NC "$(gettext 'To clean a cache')""
			echo -e "$YELLOW==>$GRE [13]$NC "$(gettext 'To Manage .pac* files')""
			echo -e "$YELLOW==>$GRE [14]$NC "$(gettext 'To run pacman-db-upgrade')""
			echo -e ""
			echo -e ""$GRE"==> $(gettext 'Press ENTER to continue')$NC"
			pause
			clear
			echo -e ""
			echo -e "$YELLOW==>$GRE [15]$NC "$(gettext 'To optimize pacman')""
			echo -e "$YELLOW==>$GRE [16]$NC "$(gettext 'To see the statistic of yaourt')""
			echo -e "$YELLOW==>$GRE [17]$NC "$(gettext 'To set a proxy')""
			echo -e "$YELLOW==>$GRE [18]$NC "$(gettext 'To remove a proxy')""
			echo -e "$YELLOW==>$GRE [19]$NC "$(gettext 'To modify') /etc/pacman.conf""
			echo -e "$YELLOW==>$GRE [20]$NC "$(gettext 'To modify') /etc/yaourtrc""
			echo -e "$YELLOW==>$GRE [L]$NC "$(gettext 'To view a log file')": /var/log/pacman.log" 
			echo -e "$YELLOW==>$GRE [B]$NC "$(gettext 'To backup list of installed packages')""   
			echo -e "$YELLOW==>$GRE [H]$NC "$(gettext 'To see this menu')""
			echo -e "$YELLOW==>$GRE [Q]$NC "$(gettext 'To exit the script')""
			echo -e ""
			press_enter
			main_menu
		;;
		Q|q|quit|exit) # Quit
			clear
			echo -e "$GREL                  YAOURT-GUI $VER - A bash GUI for Yaourt                 $NC"
			exit
		;;
		*) # Error
			echo -e ""
			echo -e ""$RED"$(gettext '!!!WARNING!!! Unknown command!!') $NC"
			press_enter
			main_menu
		;;
	esac
	main_menu
}

# Main GTK menu
main_gtk () {
	#msg="$(gettext 'Insert Root Password to be continue. Save your Password for this session.')"
	#gksu -m "$msg" /bin/sh $SCRIPT/main-gtk.sh
	/bin/sh $SCRIPT/main-gtk.sh
	case $? in
		1) main_gtk;;
		*) exit $? ;;
	esac
} 

# Start value
case $1 in 
	gtk|-gtk|--gtk) main_gtk;;
	*) main_menu;;
esac

# end script
